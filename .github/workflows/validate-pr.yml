name: Validate Pull Request

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-dev.txt
        pip install yss-core>=1.0.0
        
    - name: Check PR title format
      run: |
        title="${{ github.event.pull_request.title }}"
        if [[ ! "$title" =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+ ]]; then
          echo "❌ PR title must follow conventional commits format:"
          echo "Examples:"
          echo "  feat(strategy): add new martingale variant"
          echo "  fix(validation): improve strategy metadata checking"
          echo "  docs: update contribution guidelines"
          exit 1
        fi
        echo "✅ PR title format is valid"
        
    - name: Check for required files in new strategies
      run: |
        # Find new strategy files
        git diff --name-only origin/main...HEAD | grep "src/yss_strategies/contributed/.*\.py$" | while read file; do
          if [[ "$file" == *"__init__.py" ]]; then continue; fi
          
          strategy_name=$(basename "$file" .py)
          echo "Checking strategy: $strategy_name"
          
          # Check if strategy has corresponding test file
          test_file="tests/test_contributed/test_${strategy_name}.py"
          if [[ ! -f "$test_file" ]]; then
            echo "❌ Missing test file: $test_file"
            exit 1
          fi
          
          # Check if strategy is added to __init__.py
          if ! grep -q "$strategy_name" "src/yss_strategies/contributed/__init__.py"; then
            echo "❌ Strategy $strategy_name not added to __init__.py"
            exit 1
          fi
          
          echo "✅ Strategy $strategy_name has required files"
        done
        
    - name: Validate strategy implementation
      run: |
        python scripts/validate_new_strategies.py --pr-mode
        
    - name: Check code quality
      run: |
        # Only check changed files
        changed_files=$(git diff --name-only origin/main...HEAD | grep "\.py$" || true)
        if [[ -n "$changed_files" ]]; then
          echo "Checking code quality for: $changed_files"
          python -m pylint $changed_files
          python -m black --check $changed_files
          python -m mypy $changed_files
        fi
        
    - name: Run affected tests
      run: |
        # Run tests for changed files
        python -m pytest tests/ -v --cov=src/yss_strategies --cov-report=xml
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Check documentation
      run: |
        # Ensure new strategies have proper docstrings
        python scripts/check_documentation.py --pr-mode
        
    - name: Validate contributor information
      run: |
        # Check that contributor_name and strategy_description are provided
        python scripts/validate_contributor_info.py --pr-mode
        
    - name: Performance regression test
      run: |
        # Quick performance check to ensure new strategies don't cause issues
        python scripts/performance_regression_test.py
        
    - name: Comment PR status
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.login === 'github-actions[bot]' && 
            comment.body.includes('🤖 PR Validation Results')
          );
          
          const status = '${{ job.status }}';
          const body = `🤖 **PR Validation Results**
          
          Status: ${status === 'success' ? '✅ All checks passed!' : '❌ Some checks failed'}
          
          **Completed Checks:**
          - ✅ PR title format validation
          - ✅ Required files check
          - ✅ Strategy implementation validation
          - ✅ Code quality checks
          - ✅ Test execution
          - ✅ Documentation check
          - ✅ Contributor information validation
          - ✅ Performance regression test
          
          ${status === 'failure' ? '⚠️ Please check the workflow logs for details on failed checks.' : '🎉 Your contribution looks great! A maintainer will review it soon.'}
          `;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
