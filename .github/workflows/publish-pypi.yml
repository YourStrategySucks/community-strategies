name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version calculation
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools-scm
        
    - name: Calculate version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # Manual trigger - bump version
          current_version=$(python -c "import setuptools_scm; print(setuptools_scm.get_version())")
          echo "Current version: $current_version"
          
          # Simple version bumping logic
          version_parts=(${current_version//./ })
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          
          case "${{ github.event.inputs.version_type }}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          
          new_version="$major.$minor.$patch"
          echo "version=$new_version" >> $GITHUB_OUTPUT
          
          # Create and push tag
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "v$new_version"
          git push origin "v$new_version"
        else
          # Tag-based trigger
          version=${GITHUB_REF#refs/tags/v}
          echo "version=$version" >> $GITHUB_OUTPUT
        fi
        
    - name: Update version in package files
      run: |
        version="${{ steps.version.outputs.version }}"
        
        # Update setup.py
        sed -i "s/version=\".*\"/version=\"$version\"/" setup.py
        
        # Update pyproject.toml
        sed -i "s/version = \".*\"/version = \"$version\"/" pyproject.toml
        
        # Update __init__.py
        sed -i "s/__version__ = \".*\"/__version__ = \"$version\"/" src/yss_strategies/__init__.py
        
    - name: Run tests before publishing
      run: |
        pip install -e .
        pip install -r requirements-dev.txt
        pip install yss-core>=1.0.0
        python -m pytest tests/ -v
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        python -m twine check dist/*
        
    - name: Publish to Test PyPI
      if: github.event_name == 'workflow_dispatch'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        python -m twine upload --repository testpypi dist/*
        
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/*
        
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Changes in this Release
          
          ### New Strategies
          - List new contributed strategies here
          
          ### Improvements
          - List improvements and bug fixes
          
          ### Contributors
          - Special thanks to community contributors
          
        draft: false
        prerelease: false
        
    - name: Update contributor statistics
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        python scripts/update_contributor_stats.py
        
    - name: Notify community
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        echo "New version ${{ steps.version.outputs.version }} published to PyPI!"
        # Could add Discord/Slack notifications here
