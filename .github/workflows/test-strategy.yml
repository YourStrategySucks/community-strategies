name: Test Strategy Submission

on:
  pull_request:
    paths:
      - 'src/yss_strategies/contributed/**'
      - 'tests/test_contributed/**'
  push:
    paths:
      - 'src/yss_strategies/contributed/**'
      - 'tests/test_contributed/**'

jobs:
  validate-strategy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-dev.txt
        
    - name: Install yss-core dependency
      run: |
        pip install yss-core>=1.0.0
        
    - name: Run strategy validation
      run: |
        python -m pytest tests/test_contributed/ -v
        
    - name: Run code quality checks
      run: |
        python -m pylint src/yss_strategies/contributed/
        python -m black --check src/yss_strategies/contributed/
        python -m mypy src/yss_strategies/contributed/
        
    - name: Validate strategy metadata
      run: |
        python scripts/validate_strategy_metadata.py
        
    - name: Run performance benchmarks
      run: |
        python scripts/benchmark_strategies.py --contributed-only
        
    - name: Check for required files
      run: |
        python scripts/check_strategy_requirements.py
        
  test-integration:
    runs-on: ubuntu-latest
    needs: validate-strategy
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-dev.txt
        pip install yss-core>=1.0.0
        
    - name: Test strategy integration
      run: |
        python -c "
        from yss_strategies import get_strategy_class_map, available_strategies
        from yss_core import RouletteGame
        from yss_core.run_strategy import build_strategy
        
        # Test that all contributed strategies can be loaded
        strategies = available_strategies()
        print(f'Found {len(strategies)} strategies')
        
        # Test one contributed strategy end-to-end
        strategy_map = get_strategy_class_map()
        for name in strategies:
            if 'contributed' in strategy_map[name.lower()].__module__:
                print(f'Testing {name}...')
                strategy = build_strategy(name, 10, 100, 200)
                game = RouletteGame('test', 200, seed=42)
                # Quick 5-spin test
                for _ in range(5):
                    if game.is_game_over(): break
                    bet = strategy.place_bet(game.get_game_state())
                    if bet: game.spin(bet)
                print(f'{name} integration test passed')
                break
        "
        
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt requirements-dev.txt
        
    - name: Check for hardcoded secrets
      run: |
        # Basic check for potential secrets in contributed strategies
        find src/yss_strategies/contributed/ -name "*.py" -exec grep -l "password\|secret\|key\|token" {} \; | while read file; do
          echo "WARNING: Potential secret found in $file"
          grep -n "password\|secret\|key\|token" "$file"
        done
